env:
  global:
    - ANDROID_API=27
    - EMULATOR_API=24
    - ANDROID_BUILD_TOOLS=27.0.3
    - ios_device="iPhone 8"
    - ios_version=10.13
matrix:
  # This causes the build to complete immediately upon first failure or once
  # required jobs are green.
  fast_finish: true

  # Building APK/IPA takes a long time; do not wait for them to finish.
  allow_failures:
    - env: JOB=DRIVER-ANDROID
    - env: JOB=DRIVER-OSX

  include:
    # Runs unit tests without emulators.
    - env: JOB=TEST
      os: linux
      language: generic
      sudo: false
      addons:
        apt:
          # Flutter depends on /usr/lib/x86_64-linux-gnu/libstdc++.so.6 version GLIBCXX_3.4.18
          sources:
            - ubuntu-toolchain-r-test # if we don't specify this, the libstdc++6 we get is the wrong version
          packages:
            - libstdc++6
            - fonts-droid
      before_script:
        - git clone https://github.com/flutter/flutter.git -b beta
        - export PATH=`pwd`/flutter/bin:`pwd`/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter doctor
        - pub global activate coverage
      script:
        - ./script/runTests.sh
      after_success:
        - bash <(curl -s https://codecov.io/bash) -f lcov.info

    # Builds and runs driver on android.
    - env: JOB=DRIVER-ANDROID
      os: linux
      language: android
      licenses:
        - ".+"
      android:
        components:
          - tools
          - android-$EMULATOR_API
          - platform-tools
          - tools
          - build-tools-$ANDROID_BUILD_TOOLS
          - build-tools-26.0.2 # downloaded by gradle
          - android-$ANDROID_API
          - extra-android-support
          - extra-android-m2repository
          - extra-google-m2repository
          - sys-img-armeabi-v7a-android-$EMULATOR_API
#
#          - tools
#          - platform-tools
#          - build-tools-27.0.3
#          - android-27
#          - sys-img-armeabi-v7a-google_apis-27
#          - extra-android-m2repository
#          - extra-google-m2repository
#          - extra-google-android-support
#          - sys-img-armeabi-v7a-addon-google_apis-google-27
#          - sys-img-armeabi-v7a-android-27
      jdk: oraclejdk8
      sudo: false
      addons:
        apt:
          # Flutter depends on /usr/lib/x86_64-linux-gnu/libstdc++.so.6 version GLIBCXX_3.4.18
          sources:
            - ubuntu-toolchain-r-test # if we don't specify this, the libstdc++6 we get is the wrong version
          packages:
            - libstdc++6
            - fonts-droid
      before_install:
        - yes | sdkmanager "platforms;android-27"
#        - yes | sdkmanager --update
#      install:
#        - echo y | android update sdk -u -a -t tools
#        - echo y | android update sdk -u -a -t android-$EMULATOR_API
#        - echo y | android update sdk -u -a -t platform-tools
#        - echo y | android update sdk -u -a -t build-tools-$ANDROID_BUILD_TOOLS
#        - echo y | android update sdk -u -a -t build-tools-26.0.2
#        - echo y | android update sdk -u -a -t android-$ANDROID_API
#        - echo y | android update sdk -u -a -t extra-android-support
#        - echo y | android update sdk -u -a -t extra-google-m2repository
#        - echo y | android update sdk -u -a -t extra-android-m2repository
#        - echo y | android update sdk -u -a -t sys-img-armeabi-v7a-android-$EMULATOR_API
      before_script:
        - echo "y" | android update sdk -a --no-ui --filter android-$EMULATOR_API
        - echo "y" | android update sdk -a --no-ui --filter sys-img-armeabi-v7a-android-$EMULATOR_API
        - android list target | grep -E '^id:' | awk -F '"' '{$1=""; print $2}' # list all targets
        - echo no | android create avd --force -n test -t android-$EMULATOR_API --abi armeabi-v7a
#        - avdmanager list
#        - avdmanager list avd
#        - avdmanager create avd --force --name test --abi google_apis/x86_64 --package 'system-images;android-$EMULATOR_API;google_apis;x86_64' --device "Nexus 6P"
#        - emulator -list-avds
        - emulator -avd test -no-skin -no-window -gpu swiftshader &
        - android-wait-for-emulator
        - adb shell input keyevent 82 &
        - adb wait-for-device get-serialno
#        - cd ${TRAVIS_BUILD_DIR}
#        - chmod +x gradlew
#        - ./gradlew --version
#        - ./gradlew clean
#
#        - android list avd
#        - echo no | android create avd --force -n test -t android-27 --abi google_apis/armeabi-v7a
#        - emulator -avd test -no-audio -no-window &
#        - android-wait-for-emulator
#        - adb shell input keyevent 82 &
#        - wget http://services.gradle.org/distributions/gradle-4.1-bin.zip
#        - unzip -qq gradle-4.1-bin.zip
#        - export GRADLE_HOME=$PWD/gradle-4.1
#        - export PATH=$GRADLE_HOME/bin:$PATH
        - git clone https://github.com/flutter/flutter.git -b beta
        - export PATH=`pwd`/flutter/bin:`pwd`/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter doctor
      script:
        - ./script/runDriver.sh emulator-5554
      cache:
        directories:
        - $HOME/.m2
        - $HOME/.gradle/caches/
        - $HOME/.gradle/wrapper/
        - $HOME/.android/build-cache

    # Builds and runs driver on osx.
    - env: JOB=DRIVER-OSX
      os: osx
      language: generic
      osx_image: xcode9.4
      before_install:
        - xcrun simctl list
        - |
          ios_simulator_udid=$(
            xcrun simctl create "testing device" \
                "com.apple.CoreSimulator.SimDeviceType.${ios_device// /-}" \
                "com.apple.CoreSimulator.SimRuntime.iOS-${ios_version//./-}"
          )
          echo "Prelaunching iOS simulator with UDID $ios_simulator_udid"
      before_script:
        - open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app --args -CurrentDeviceUDID $ios_simulator_udid
#          open -a "simulator" --args -CurrentDeviceUDID $ios_simulator_udid
        - export $ios_simulator_udid
        - curl https://bootstrap.pypa.io/get-pip.py | sudo python
        - pip install six
        - brew update
        - brew install --HEAD libimobiledevice || echo 'ignore exit(1)'
        - brew install ideviceinstaller
        - brew install ios-deploy
        - brew install cocoapods || echo 'ignore exit(1)'
        - brew link --overwrite cocoapods
        - pod setup
        - git clone https://github.com/flutter/flutter.git -b beta
        - export PATH=`pwd`/flutter/bin:`pwd`/flutter/bin/cache/dart-sdk/bin:$PATH
        - flutter doctor
#        - flutter emulators --create --name test_emulator
#        - flutter emulators --launch test_emulator
#        - flutter emulators
      script:
        - ./script/runDriver.sh $ios_simulator_udid

cache:
  directories:
    - $HOME/.pub-cache